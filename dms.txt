databaseutil.java
package com.bms.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.io.InputStream;
import java.util.Properties;

public class DatabaseUtil {
    private static final String PROPERTIES_FILE = "/db.properties";
    private static Properties properties = new Properties();

    static {
        try (InputStream inputStream = DatabaseUtil.class.getResourceAsStream(PROPERTIES_FILE)) {
            properties.load(inputStream);
            Class.forName(properties.getProperty("jdbc.driver"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(
            properties.getProperty("jdbc.url"),
            properties.getProperty("jdbc.username"),
            properties.getProperty("jdbc.password")
        );
    }
}


db.properties

jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/bms_db?useSSL=false&serverTimezone=UTC
jdbc.username=your_username
jdbc.password=your_password

user.java
package com.bms.model;

public class User {
    private int userId;
    private String email;
    private String password;
    private String userType;

    // Constructors, getters, and setters
    public User() {}

    public User(int userId, String email, String password, String userType) {
        this.userId = userId;
        this.email = email;
        this.password = password;
        this.userType = userType;
    }

    // Getters and setters
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUserType() {
        return userType;
    }

    public void setUserType(String userType) {
        this.userType = userType;
    }
}

customer.java
package com.bms.model;

import java.sql.Timestamp;

public class Customer {
    private int customerId;
    private String firstName;
    private String lastName;
    private String email;
    private String mobileNumber;
    private Timestamp dateOfBirth;
    private String address;

    // Constructors, getters, and setters
    public Customer() {}

    public Customer(int customerId, String firstName, String lastName, String email, String mobileNumber, Timestamp dateOfBirth, String address) {
        this.customerId = customerId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.mobileNumber = mobileNumber;
        this.dateOfBirth = dateOfBirth;
        this.address = address;
    }

    // Getters and setters
    public int getCustomerId() {
        return customerId;
    }

    public void setCustomerId(int customerId) {
        this.customerId = customerId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getMobileNumber() {
        return mobileNumber;
    }

    public void setMobileNumber(String mobileNumber) {
        this.mobileNumber = mobileNumber;
    }

    public Timestamp getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(Timestamp dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }
}

account.java
package com.bms.model;

import java.math.BigDecimal;

public class Account {
    private int accountNumber;
    private int customerId;
    private BigDecimal balance;
    private String status;
    private String accountType;

    // Constructors, getters, and setters
    public Account() {}

    public Account(int accountNumber, int customerId, BigDecimal balance, String status, String accountType) {
        this.accountNumber = accountNumber;
        this.customerId = customerId;
        this.balance = balance;
        this.status = status;
        this.accountType = accountType;
    }

    // Getters and setters
    public int getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(int accountNumber) {
        this.accountNumber = accountNumber;
    }

    public int getCustomerId() {
        return customerId;
    }

    public void setCustomerId(int customerId) {
        this.customerId = customerId;
    }

    public BigDecimal getBalance() {
        return balance;
    }

    public void setBalance(BigDecimal balance) {
        this.balance = balance;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }
}
transcation.java
package com.bms.model;

import java.math.BigDecimal;
import java.sql.Timestamp;

public class Transaction {
    private int transactionId;
    private int accountNumber;
    private int recipientAccountNumber;
    private String recipientName;
    private String ifscCode;
    private String type;
    private BigDecimal amount;
    private Timestamp transactionDate;
    private String remarks;

    // Constructors, getters, and setters
    public Transaction() {}

    public Transaction(int transactionId, int accountNumber, int recipientAccountNumber, String recipientName,
                       String ifscCode, String type, BigDecimal amount, Timestamp transactionDate, String remarks) {
        this.transactionId = transactionId;
        this.accountNumber = accountNumber;
        this.recipientAccountNumber = recipientAccountNumber;
        this.recipientName = recipientName;
        this.ifscCode = ifscCode;
        this.type = type;
        this.amount = amount;
        this.transactionDate = transactionDate;
        this.remarks = remarks;
    }

    // Getters and setters
    public int getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(int transactionId) {
        this.transactionId = transactionId;
    }

    public int getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(int accountNumber) {
        this.accountNumber = accountNumber;
    }

    public int getRecipientAccountNumber() {
        return recipientAccountNumber;
    }

    public void setRecipientAccountNumber(int recipientAccountNumber) {
        this.recipientAccountNumber = recipientAccountNumber;
    }

    public String getRecipientName() {
        return recipientName;
    }

    public void setRecipientName(String recipientName) {
        this.recipientName = recipientName;
    }

    public String getIfscCode() {
        return ifscCode;
    }

    public void setIfscCode(String ifscCode) {
        this.ifscCode = ifscCode;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public Timestamp getTransactionDate() {
        return transactionDate;
    }

    public void setTransactionDate(Timestamp transactionDate) {
        this.transactionDate = transactionDate;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }
}
--------------------------------------------------------------

UserDAO.java

package com.bms.dao;

import com.bms.model.User;
import com.bms.util.DatabaseUtil;

import java.sql.*;

public class UserDAO {
    public User getUserByEmail(String email) throws SQLException {
        String sql = "SELECT * FROM users_master WHERE email = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, email);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                        rs.getInt("user_id"),
                        rs.getString("email"),
                        rs.getString("password"),
                        rs.getString("user_type")
                    );
                }
            }
        }
        return null;
    }

    public boolean insertUser(User user) throws SQLException {
        String sql = "INSERT INTO users_master (email, password, user_type) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, user.getEmail());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getUserType());
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    // Add other CRUD operations as needed
}


CustomerDAO.java
package com.bms.dao;

import com.bms.model.Customer;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CustomerDAO {
    public Customer getCustomerById(int customerId) throws SQLException {
        String sql = "SELECT * FROM customer_master WHERE customer_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, customerId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new Customer(
                        rs.getInt("customer_id"),
                        rs.getString("first_name"),
                        rs.getString("last_name"),
                        rs.getString("email"),
                        rs.getString("mobile_number"),
                        rs.getTimestamp("date_of_birth"),
                        rs.getString("address")
                    );
                }
            }
        }
        return null;
    }

    public boolean insertCustomer(Customer customer) throws SQLException {
        String sql = "INSERT INTO customer_master (first_name, last_name, email, mobile_number, date_of_birth, address) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, customer.getFirstName());
            pstmt.setString(2, customer.getLastName());
            pstmt.setString(3, customer.getEmail());
            pstmt.setString(4, customer.getMobileNumber());
            pstmt.setTimestamp(5, customer.getDateOfBirth());
            pstmt.setString(6, customer.getAddress());
            
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                return false;
            }

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    customer.setCustomerId(generatedKeys.getInt(1));
                }
            }
            return true;
        }
    }

    public List<Customer> getAllCustomers() throws SQLException {
        List<Customer> customers = new ArrayList<>();
        String sql = "SELECT * FROM customer_master";
        try (Connection conn = DatabaseUtil.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                customers.add(new Customer(
                    rs.getInt("customer_id"),
                    rs.getString("first_name"),
                    rs.getString("last_name"),
                    rs.getString("email"),
                    rs.getString("mobile_number"),
                    rs.getTimestamp("date_of_birth"),
                    rs.getString("address")
                ));
            }
        }
        return customers;
    }

    public boolean updateCustomer(Customer customer) throws SQLException {
        String sql = "UPDATE customer_master SET first_name = ?, last_name = ?, email = ?, mobile_number = ?, date_of_birth = ?, address = ? WHERE customer_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, customer.getFirstName());
            pstmt.setString(2, customer.getLastName());
            pstmt.setString(3, customer.getEmail());
            pstmt.setString(4, customer.getMobileNumber());
            pstmt.setTimestamp(5, customer.getDateOfBirth());
            pstmt.setString(6, customer.getAddress());
            pstmt.setInt(7, customer.getCustomerId());
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    // Add other CRUD operations as needed
}

AccountDAO.java

package com.bms.dao;

import com.bms.model.Account;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class AccountDAO {
    public Account getAccountByNumber(int accountNumber) throws SQLException {
        String sql = "SELECT * FROM account_master WHERE account_number = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountNumber);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new Account(
                        rs.getInt("account_number"),
                        rs.getInt("customer_id"),
                        rs.getBigDecimal("balance"),
                        rs.getString("status"),
                        rs.getString("account_type")
                    );
                }
            }
        }
        return null;
    }

    public boolean insertAccount(Account account) throws SQLException {
        String sql = "INSERT INTO account_master (customer_id, balance, status, account_type) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, account.getCustomerId());
            pstmt.setBigDecimal(2, account.getBalance());
            pstmt.setString(3, account.getStatus());
            pstmt.setString(4, account.getAccountType());
            
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                return false;
            }

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    account.setAccountNumber(generatedKeys.getInt(1));
                }
            }
            return true;
        }
    }

    public List<Account> getAccountsByCustomerId(int customerId) throws SQLException {
        List<Account> accounts = new ArrayList<>();
        String sql = "SELECT * FROM account_master WHERE customer_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, customerId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    accounts.add(new Account(
                        rs.getInt("account_number"),
                        rs.getInt("customer_id"),
                        rs.getBigDecimal("balance"),
                        rs.getString("status"),
                        rs.getString("account_type")
                    ));
                }
            }
        }
        return accounts;
    }

    public boolean updateAccountStatus(int accountNumber, String status) throws SQLException {
        String sql = "UPDATE account_master SET status = ? WHERE account_number = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, status);
            pstmt.setInt(2, accountNumber);
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    public boolean updateBalance(int accountNumber, BigDecimal newBalance) throws SQLException {
        String sql = "UPDATE account_master SET balance = ? WHERE account_number = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setBigDecimal(1, newBalance);
            pstmt.setInt(2, accountNumber);
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    // Add other CRUD operations as needed
}

TranscationDAO.java
package com.bms.dao;

import com.bms.model.Transaction;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TransactionDAO {
    public boolean insertTransaction(Transaction transaction) throws SQLException {
        String sql = "INSERT INTO transaction_master (account_number, recipient_account_number, recipient_name, ifsc_code, type, amount, transaction_date, remarks) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, transaction.getAccountNumber());
            pstmt.setInt(2, transaction.getRecipientAccountNumber());
            pstmt.setString(3, transaction.getRecipientName());
            pstmt.setString(4, transaction.getIfscCode());
            pstmt.setString(5, transaction.getType());
            pstmt.setBigDecimal(6, transaction.getAmount());
            pstmt.setTimestamp(7, transaction.getTransactionDate());
            pstmt.setString(8, transaction.getRemarks());
            
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                return false;
            }

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    transaction.setTransactionId(generatedKeys.getInt(1));
                }
            }
            return true;
        }
    }

    public List<Transaction> getTransactionsByAccountNumber(int accountNumber) throws SQLException {
        List<Transaction> transactions = new ArrayList<>();
        String sql = "SELECT * FROM transaction_master WHERE account_number = ? ORDER BY transaction_date DESC";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountNumber);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    transactions.add(new Transaction(
                        rs.getInt("transaction_id"),
                        rs.getInt("account_number"),
                        rs.getInt("recipient_account_number"),
                        rs.getString("recipient_name"),
                        rs.getString("ifsc_code"),
                        rs.getString("type"),
                        rs.getBigDecimal("amount"),
                        rs.getTimestamp("transaction_date"),
                        rs.getString("remarks")
                    ));
                }
            }
        }
        return transactions;
    }

    public List<Transaction> getRecentTransactions(int accountNumber, int limit) throws SQLException {
        List<Transaction> transactions = new ArrayList<>();
        String sql = "SELECT * FROM transaction_master WHERE account_number = ? ORDER BY transaction_date DESC LIMIT ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountNumber);
            pstmt.setInt(2, limit);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    transactions.add(new Transaction(
                        rs.getInt("transaction_id"),
                        rs.getInt("account_number"),
                        rs.getInt("recipient_account_number"),
                        rs.getString("recipient_name"),
                        rs.getString("ifsc_code"),
                        rs.getString("type"),
                        rs.getBigDecimal("amount"),
                        rs.getTimestamp("transaction_date"),
                        rs.getString("remarks")
                    ));
                }
            }
        }
        return transactions;
    }

    // Add other CRUD operations as needed
}
-----------------------------------------------------------------------------
LoginServlet
package com.bms.controller;

import com.bms.dao.UserDAO;
import com.bms.model.User;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    private UserDAO userDAO;

    @Override
    public void init() {
        userDAO = new UserDAO();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String userType = request.getParameter("userType");

        try {
            User user = userDAO.getUserByEmail(email);
            if (user != null && user.getPassword().equals(password) && user.getUserType().equals(userType)) {
                HttpSession session = request.getSession();
                session.setAttribute("user", user);
                if (userType.equals("admin")) {
                    response.sendRedirect("admin/dashboard.jsp");
                } else {
                    response.sendRedirect("customer/dashboard.jsp");
                }
            } else {
                request.setAttribute("errorMessage", "Invalid credentials");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            throw new ServletException("Database error", e);
        }
    }
}
AdminServlet.java
package com.bms.controller;

import com.bms.dao.AccountDAO;
import com.bms.dao.CustomerDAO;
import com.bms.model.Account;
import com.bms.model.Customer;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

@WebServlet("/admin/*")
public class AdminServlet extends HttpServlet {
    private CustomerDAO customerDAO;
    private AccountDAO accountDAO;

    @Override
    public void init() {
        customerDAO = new CustomerDAO();
        accountDAO = new AccountDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/listCustomers":
                    listCustomers(request, response);
                    break;
                case "/viewAccount":
                    viewAccount(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/admin/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/createAccount":
                    createAccount(request, response);
                    break;
                case "/updateAccountStatus":
                    updateAccountStatus(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/admin/dashboard.jsp");
                    break;
            }
        } catch (SQLException | ParseException ex) {
            throw new ServletException(ex);
        }
    }

    private void listCustomers(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        List<Customer> customers = customerDAO.getAllCustomers();
        request.setAttribute("customers", customers);
        request.getRequestDispatcher("/admin/manageAccounts.jsp").forward(request, response);
    }

    private void viewAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        Account account = accountDAO.getAccountByNumber(accountNumber);
        request.setAttribute("account", account);
        request.getRequestDispatcher("/admin/viewAccount.jsp").forward(request, response);
    }

    private void createAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException, ParseException {
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");
        String email = request.getParameter("email");
        String mobileNo = request.getParameter("mobileNo");
        String dob = request.getParameter("dob");
        String address = request.getParameter("address");
        BigDecimal initialDeposit = new BigDecimal(request.getParameter("initialDeposit"));
        String accountType = request.getParameter("accountType");

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Timestamp dateOfBirth = new Timestamp(dateFormat.parse(dob).getTime());

        Customer customer = new Customer(0, firstName, lastName, email, mobileNo, dateOfBirth, address);
        customerDAO.insertCustomer(customer);

        Account account = new Account(0, customer.getCustomerId(), initialDeposit, "active", accountType);
        accountDAO.insertAccount(account);

        response.sendRedirect(request.getContextPath() + "/admin/manageAccounts.jsp");
    }

    private void updateAccountStatus(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        String status = request.getParameter("status");
        accountDAO.updateAccountStatus(accountNumber, status);
        response.sendRedirect(request.getContextPath() + "/admin/manageAccounts.jsp");
    }
}

CustomerServlet
package com.bms.controller;

import com.bms.dao.AccountDAO;
import com.bms.dao.CustomerDAO;
import com.bms.dao.TransactionDAO;
import com.bms.model.Account;
import com.bms.model.Customer;
import com.bms.model.Transaction;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

@WebServlet("/customer/*")
public class CustomerServlet extends HttpServlet {
    private CustomerDAO customerDAO;
    private AccountDAO accountDAO;
    private TransactionDAO transactionDAO;

    @Override
    public void init() {
        customerDAO = new CustomerDAO();
        accountDAO = new AccountDAO();
        transactionDAO = new TransactionDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/dashboard":
                    showDashboard(request, response);
                    break;
                case "/checkBalance":
                    checkBalance(request, response);
                    break;
                case "/transactionHistory":
                    showTransactionHistory(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/transferFunds":
                    transferFunds(request, response);
                    break;
                case "/deposit":
                    deposit(request, response);
                    break;
                case "/withdraw":
                    withdraw(request, response);
                    break;
                case "/changeRequest":
                    submitChangeRequest(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    private void showDashboard(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        List<Account> accounts = accountDAO.getAccountsByCustomerId(customer.getCustomerId());
        request.setAttribute("accounts", accounts);
        request.getRequestDispatcher("/customer/dashboard.jsp").forward(request, response);
    }

    private void checkBalance(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        Account account = accountDAO.getAccountByNumber(accountNumber);
        List<Transaction> recentTransactions = transactionDAO.getRecentTransactions(accountNumber, 5);
        request.setAttribute("account", account);
        request.setAttribute("recentTransactions", recentTransactions);
        request.getRequestDispatcher("/customer/checkBalance.jsp").forward(request, response);
    }

    private void showTransactionHistory(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        List<Transaction> transactions = transactionDAO.getTransactionsByAccountNumber(accountNumber);
        request.setAttribute("transactions", transactions);
        request.getRequestDispatcher("/customer/transactionHistory.jsp").forward(request, response);
    }

    private void transferFunds(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int fromAccountNumber = Integer.parseInt(request.getParameter("fromAccount"));
        int toAccountNumber = Integer.parseInt(request.getParameter("toAccount"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account fromAccount = accountDAO.getAccountByNumber(fromAccountNumber);
        Account toAccount = accountDAO.getAccountByNumber(toAccountNumber);

        if (fromAccount.getBalance().compareTo(amount) >= 0) {
            // Perform transfer
            fromAccount.setBalance(fromAccount.getBalance().subtract(amount));
            toAccount.setBalance(toAccount.getBalance().add(amount));

            accountDAO.updateBalance(fromAccountNumber, fromAccount.getBalance());
            accountDAO.updateBalance(toAccountNumber, toAccount.getBalance());

            // Record transactions
            Transaction debitTransaction = new Transaction(0, fromAccountNumber, toAccountNumber, toAccount.getCustomerId().toString(), "", "TRANSFER", amount, new Timestamp(System.currentTimeMillis()), remarks);
            Transaction creditTransaction = new Transaction(0, toAccountNumber, fromAccountNumber, fromAccount.getCustomerId().toString(), "", "TRANSFER", amount, new Timestamp(System.currentTimeMillis()), remarks);

            transactionDAO.insertTransaction(debitTransaction);
            transactionDAO.insertTransaction(creditTransaction);

            request.setAttribute("message", "Transfer successful");
        } else {
            request.setAttribute("error", "Insufficient funds");
        }

        response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
    }

    private void deposit(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account account = accountDAO.getAccountByNumber(accountNumber);
        account.setBalance(account.getBalance().add(amount));
        accountDAO.updateBalance(accountNumber, account.getBalance());

        Transaction transaction = new Transaction(0, accountNumber, accountNumber, "", "", "DEPOSIT", amount, new Timestamp(System.currentTimeMillis()), remarks);
        transactionDAO.insertTransaction(transaction);

        request.setAttribute("message", "Deposit successful");
        response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
    }

    private void withdraw(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account account = accountDAO.getAccountByNumber(accountNumber);
        if (account.getBalance().compareTo(amount) >= 0) {
            account.setBalance(account.getBalance().subtract(amount));
            accountDAO.updateBalance(accountNumber, account.getBalance());

            Transaction transaction = new Transaction(0, accountNumber, accountNumber, "", "", "WITHDRAWAL", amount, new Timestamp(System.currentTimeMillis()), remarks);
            transactionDAO.insertTransaction(transaction);

            request.setAttribute("message", "Withdrawal successful");
        } else {
            request.setAttribute("error", "Insufficient funds");
        }

        response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
    }

    private void submitChangeRequest(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        // Implement the logic for submitting change requests
        // This could involve creating a new table for change requests and inserting the data
        // For simplicity, we'll just redirect to the dashboard with a message
        request.setAttribute("message", "Change request submitted successfully");
        response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
    }
}

logoutservlet
package com.bms.controller;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebServlet("/logout")
public class LogoutServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        response.sendRedirect(request.getContextPath() + "/login.jsp");
    }
}
------------------------------------------------------------------------------------------
login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Login - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Login</h2>
        <form action="${pageContext.request.contextPath}/login" method="post">
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <div class="form-group">
                <label for="userType">User Type:</label>
                <select id="userType" name="userType" required>
                    <option value="admin">Admin</option>
                    <option value="customer">Customer</option>
                </select>
            </div>
            <button type="submit">Login</button>
        </form>
        <% if (request.getAttribute("errorMessage") != null) { %>
            <p class="error"><%= request.getAttribute("errorMessage") %></p>
        <% } %>
    </div>
</body>
</html>

admin/dashboard.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Admin Dashboard - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Admin Dashboard</h2>
        <nav>
            <ul>
                <li><a href="${pageContext.request.contextPath}/admin/createAccount.jsp">Create Account</a></li>
                <li><a href="${pageContext.request.contextPath}/admin/listCustomers">Manage Accounts</a></li>
                <li><a href="${pageContext.request.contextPath}/admin/profileChangeRequests.jsp">Profile Change Requests</a></li>
                <li><a href="${pageContext.request.contextPath}/admin/neftRequests.jsp">NEFT Requests</a></li>
                <li><a href="${pageContext.request.contextPath}/logout">Logout</a></li>
            </ul>
        </nav>
        <div id="content">
            <!-- Content will be loaded here based on the selected option -->
        </div>
    </div>
    <script src="${pageContext.request.contextPath}/js/scripts.js"></script>
</body>
</html>


admin/createAccount.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Create Account - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Create New Account</h2>
        <form action="${pageContext.request.contextPath}/admin/createAccount" method="post">
            <div class="form-group">
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" name="firstName" required>
            </div>
            <div class="form-group">
                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" name="lastName" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="mobileNo">Mobile Number:</label>
                <input type="tel" id="mobileNo" name="mobileNo" required>
            </div>
            <div class="form-group">
                <label for="dob">Date of Birth:</label>
                <input type="date" id="dob" name="dob" required>
            </div>
            <div class="form-group">
                <label for="address">Address:</label>
                <textarea id="address" name="address" required></textarea>
            </div>
            <div class="form-group">
                <label for="initialDeposit">Initial Deposit:</label>
                <input type="number" id="initialDeposit" name="initialDeposit" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="accountType">Account Type:</label>
                <select id="accountType" name="accountType" required>
                    <option value="savings">Savings</option>
                    <option value="current">Current</option>
                </select>
            </div>
            <button type="submit">Create Account</button>
            <button type="reset">Reset</button>
        </form>
    </div>
</body>
</html>

admin/manageAccounts.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Manage Accounts - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Manage Accounts</h2>
        <table>
            <thead>
                <tr>
                    <th>Customer ID</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Mobile Number</th>
                    <th>Date of Birth</th>
                    <th>Address</th>
                    <th>Account Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="customer" items="${customers}">
                    <tr>
                        <td>${customer.customerId}</td>
                        <td>${customer.firstName}</td>
                        <td>${customer.lastName}</td>
                        <td>${customer.email}</td>
                        <td>${customer.mobileNumber}</td>
                        <td>${customer.dateOfBirth}</td>
                        <td>${customer.address}</td>
                        <td>${customer.accountType}</td>
                        <td>
                            <a href="${pageContext.request.contextPath}/admin/viewAccount?accountNumber=${customer.accountNumber}">View</a>
                            <form action="${pageContext.request.contextPath}/admin/updateAccountStatus" method="post" style="display:inline;">
                                <input type="hidden" name="accountNumber" value="${customer.accountNumber}">
                                <select name="status" onchange="this.form.submit()">
                                    <option value="active" ${customer.status == 'active' ? 'selected' : ''}>Active</option>
                                    <option value="inactive" ${customer.status == 'inactive' ? 'selected' : ''}>Inactive</option>
                                </select>
                            </form>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>
</body>
</html>

admin/profileChangeRequests.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Profile Change Requests - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Profile Change Requests</h2>
        <table>
            <thead>
                <tr>
                    <th>Request ID</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Change Type</th>
                    <th>Details</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="request" items="${changeRequests}">
                    <tr>
                        <td>${request.requestId}</td>
                        <td>${request.fullName}</td>
                        <td>${request.email}</td>
                        <td>${request.changeType}</td>
                        <td>${request.details}</td>
                        <td>
                            <form action="${pageContext.request.contextPath}/admin/approveChangeRequest" method="post" style="display:inline;">
                                <input type="hidden" name="requestId" value="${request.requestId}">
                                <button type="submit">Approve</button>
                            </form>
                            <form action="${pageContext.request.contextPath}/admin/rejectChangeRequest" method="post" style="display:inline;">
                                <input type="hidden" name="requestId" value="${request.requestId}">
                                <button type="submit">Reject</button>
                            </form>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>
</body>
</html>

admin/neftRequests.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>NEFT Requests - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>NEFT Requests</h2>
        <table>
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>From Account #</th>
                    <th>To Account #</th>
                    <th>Transaction #</th>
                    <th>Transaction Request Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="request" items="${neftRequests}" varStatus="status">
                    <tr>
                        <td>${status.index + 1}</td>
                        <td>${request.fullName}</td>
                        <td>${request.email}</td>
                        <td>${request.fromAccount}</td>
                        <td>${request.toAccount}</td>
                        <td>${request.transactionNumber}</td>
                        <td>${request.requestDate}</td>
                        <td>
                            <form action="${pageContext.request.contextPath}/admin/approveNeftRequest" method="post" style="display:inline;">
                                <input type="hidden" name="transactionNumber" value="${request.transactionNumber}">
                                <button type="submit">Approve</button>
                            </form>
                            <form action="${pageContext.request.contextPath}/admin/rejectNeftRequest" method="post" style="display:inline;">
                                <input type="hidden" name="transactionNumber" value="${request.transactionNumber}">
                                <button type="submit">Reject</button>
                            </form>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>
</body>
</html>

customer/dashboard.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Customer Dashboard - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Customer Dashboard</h2>
        <nav>
            <ul>
                <li><a href="${pageContext.request.contextPath}/customer/checkBalance">Check Balance</a></li>
                <li><a href="${pageContext.request.contextPath}/customer/fundTransfer.jsp">Fund Transfer</a></li>
                <li><a href="${pageContext.request.contextPath}/customer/transactionHistory">Transaction Reports</a></li>
                <li><a href="${pageContext.request.contextPath}/customer/changeRequest.jsp">Change Request</a></li>
                <li><a href="${pageContext.request.contextPath}/customer/deposit.jsp">Deposit</a></li>
                <li><a href="${pageContext.request.contextPath}/customer/withdraw.jsp">Withdrawal</a></li>
                <li><a href="${pageContext.request.contextPath}/logout">Logout</a></li>
            </ul>
        </nav>
        <div id="content">
            <h3>Welcome, ${sessionScope.customer.firstName} ${sessionScope.customer.lastName}</h3>
            <p>Your Account(s):</p>
            <ul>
                <c:forEach var="account" items="${accounts}">
                    <li>Account Number: ${account.accountNumber} (${account.accountType})</li>
                </c:forEach>
            </ul>
        </div>
    </div>
    <script src="${pageContext.request.contextPath}/js/scripts.js"></script>
</body>
</html>	


<%-- checkBalance.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Check Balance - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Check Balance</h2>
        <p>Account Number: ${account.accountNumber}</p>
        <p>Current Balance: $${account.balance}</p>
        <h3>Recent Transactions</h3>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="transaction" items="${recentTransactions}">
                    <tr>
                        <td>${transaction.transactionDate}</td>
                        <td>${transaction.type}</td>
                        <td>$${transaction.amount}</td>
                        <td>${transaction.remarks}</td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- fundTransfer.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Fund Transfer - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Fund Transfer</h2>
        <form action="${pageContext.request.contextPath}/customer/transferFunds" method="post">
            <div class="form-group">
                <label for="fromAccount">From Account:</label>
                <select id="fromAccount" name="fromAccount" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="toAccount">To Account:</label>
                <input type="text" id="toAccount" name="toAccount" required>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Transfer Funds</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- transactionHistory.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Transaction History - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Transaction History</h2>
        <table>
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="transaction" items="${transactions}">
                    <tr>
                        <td>${transaction.transactionId}</td>
                        <td>${transaction.transactionDate}</td>
                        <td>${transaction.type}</td>
                        <td>$${transaction.amount}</td>
                        <td>${transaction.remarks}</td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- changeRequest.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Change Request - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Submit Change Request</h2>
        <form action="${pageContext.request.contextPath}/customer/changeRequest" method="post">
            <div class="form-group">
                <label for="changeType">Change Type:</label>
                <select id="changeType" name="changeType" required>
                    <option value="address">Address Change</option>
                    <option value="mobile">Mobile Number Change</option>
                    <option value="email">Email Change</option>
                </select>
            </div>
            <div class="form-group">
                <label for="newValue">New Value:</label>
                <input type="text" id="newValue" name="newValue" required>
            </div>
            <div class="form-group">
                <label for="reason">Reason for Change:</label>
                <textarea id="reason" name="reason" required></textarea>
            </div>
            <button type="submit">Submit Request</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- deposit.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Deposit - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Deposit</h2>
        <form action="${pageContext.request.contextPath}/customer/deposit" method="post">
            <div class="form-group">
                <label for="accountNumber">Account Number:</label>
                <select id="accountNumber" name="accountNumber" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Deposit</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- withdrawal.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Withdrawal - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Withdrawal</h2>
        <form action="${pageContext.request.contextPath}/customer/withdraw" method="post">
            <div class="form-group">
                <label for="accountNumber">Account Number:</label>
                <select id="accountNumber" name="accountNumber" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Withdraw</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>


Cientside js
// scripts.js
document.addEventListener('DOMContentLoaded', function() {
    // Form validation
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('error');
                } else {
                    field.classList.remove('error');
                }
            });

            if (!isValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
            }
        });
    });

    // Amount input validation
    const amountInputs = document.querySelectorAll('input[type="number"][step="0.01"]');
    amountInputs.forEach(input => {
        input.addEventListener('input', function() {
            this.value = parseFloat(this.value).toFixed(2);
        });
    });

    // Toggle password visibility
    const passwordFields = document.querySelectorAll('input[type="password"]');
    passwordFields.forEach(field => {
        const toggleButton = document.createElement('button');
        toggleButton.type = 'button';
        toggleButton.textContent = 'Show';
        toggleButton.classList.add('toggle-password');
        field.parentNode.insertBefore(toggleButton, field.nextSibling);

        toggleButton.addEventListener('click', function() {
            const type = field.getAttribute('type') === 'password' ? 'text' : 'password';
            field.setAttribute('type', type);
            this.textContent = type === 'password' ? 'Show' : 'Hide';
        });
    });

    // Confirmation dialog for important actions
    const confirmActions = document.querySelectorAll('.confirm-action');
    confirmActions.forEach(action => {
        action.addEventListener('click', function(event) {
            if (!confirm('Are you sure you want to perform this action?')) {
                event.preventDefault();
            }
        });
    });
});

<script src="${pageContext.request.contextPath}/js/scripts.js"></script>

These JSP files cover the main functionalities of the Banking Management System. You'll need to create additional JSP files for the remaining customer operations (checkBalance, fundTransfer, transactionHistory, changeRequest, deposit, and withdraw) following a similar pattern. and also js if any client side functionality needed.

<%-- checkBalance.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Check Balance - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Check Balance</h2>
        <p>Account Number: ${account.accountNumber}</p>
        <p>Current Balance: $${account.balance}</p>
        <h3>Recent Transactions</h3>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="transaction" items="${recentTransactions}">
                    <tr>
                        <td>${transaction.transactionDate}</td>
                        <td>${transaction.type}</td>
                        <td>$${transaction.amount}</td>
                        <td>${transaction.remarks}</td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- fundTransfer.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Fund Transfer - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Fund Transfer</h2>
        <form action="${pageContext.request.contextPath}/customer/transferFunds" method="post">
            <div class="form-group">
                <label for="fromAccount">From Account:</label>
                <select id="fromAccount" name="fromAccount" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="toAccount">To Account:</label>
                <input type="text" id="toAccount" name="toAccount" required>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Transfer Funds</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- transactionHistory.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Transaction History - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Transaction History</h2>
        <table>
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="transaction" items="${transactions}">
                    <tr>
                        <td>${transaction.transactionId}</td>
                        <td>${transaction.transactionDate}</td>
                        <td>${transaction.type}</td>
                        <td>$${transaction.amount}</td>
                        <td>${transaction.remarks}</td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- changeRequest.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Change Request - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Submit Change Request</h2>
        <form action="${pageContext.request.contextPath}/customer/changeRequest" method="post">
            <div class="form-group">
                <label for="changeType">Change Type:</label>
                <select id="changeType" name="changeType" required>
                    <option value="address">Address Change</option>
                    <option value="mobile">Mobile Number Change</option>
                    <option value="email">Email Change</option>
                </select>
            </div>
            <div class="form-group">
                <label for="newValue">New Value:</label>
                <input type="text" id="newValue" name="newValue" required>
            </div>
            <div class="form-group">
                <label for="reason">Reason for Change:</label>
                <textarea id="reason" name="reason" required></textarea>
            </div>
            <button type="submit">Submit Request</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- deposit.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Deposit - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Deposit</h2>
        <form action="${pageContext.request.contextPath}/customer/deposit" method="post">
            <div class="form-group">
                <label for="accountNumber">Account Number:</label>
                <select id="accountNumber" name="accountNumber" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Deposit</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

<%-- withdrawal.jsp --%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Withdrawal - Banking Management System</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/styles.css">
</head>
<body>
    <div class="container">
        <h2>Withdrawal</h2>
        <form action="${pageContext.request.contextPath}/customer/withdraw" method="post">
            <div class="form-group">
                <label for="accountNumber">Account Number:</label>
                <select id="accountNumber" name="accountNumber" required>
                    <c:forEach var="account" items="${accounts}">
                        <option value="${account.accountNumber}">${account.accountNumber} (${account.accountType})</option>
                    </c:forEach>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input type="number" id="amount" name="amount" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="remarks">Remarks:</label>
                <textarea id="remarks" name="remarks"></textarea>
            </div>
            <button type="submit">Withdraw</button>
        </form>
        <a href="${pageContext.request.contextPath}/customer/dashboard.jsp">Back to Dashboard</a>
    </div>
</body>
</html>

updatedAdminServlet
package com.bms.controller;

import com.bms.dao.AccountDAO;
import com.bms.dao.CustomerDAO;
import com.bms.model.Account;
import com.bms.model.Customer;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

@WebServlet("/admin/*")
public class AdminServlet extends HttpServlet {
    private CustomerDAO customerDAO;
    private AccountDAO accountDAO;

    @Override
    public void init() {
        customerDAO = new CustomerDAO();
        accountDAO = new AccountDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/listCustomers":
                    listCustomers(request, response);
                    break;
                case "/viewAccount":
                    viewAccount(request, response);
                    break;
                case "/createAccountForm":
                    showCreateAccountForm(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/admin/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/createAccount":
                    createAccount(request, response);
                    break;
                case "/updateAccountStatus":
                    updateAccountStatus(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/admin/dashboard.jsp");
                    break;
            }
        } catch (SQLException | ParseException ex) {
            throw new ServletException(ex);
        }
    }

    private void listCustomers(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        List<Customer> customers = customerDAO.getAllCustomers();
        request.setAttribute("customers", customers);
        request.getRequestDispatcher("/admin/manageAccounts.jsp").forward(request, response);
    }

    private void viewAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        Account account = accountDAO.getAccountByNumber(accountNumber);
        request.setAttribute("account", account);
        request.getRequestDispatcher("/admin/viewAccount.jsp").forward(request, response);
    }

    private void showCreateAccountForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/admin/createAccount.jsp").forward(request, response);
    }

    private void createAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException, ParseException {
        String firstName = request.getParameter("firstName");
        String lastName = request.getParameter("lastName");
        String email = request.getParameter("email");
        String mobileNo = request.getParameter("mobileNo");
        String dob = request.getParameter("dob");
        String address = request.getParameter("address");
        BigDecimal initialDeposit = new BigDecimal(request.getParameter("initialDeposit"));
        String accountType = request.getParameter("accountType");

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Timestamp dateOfBirth = new Timestamp(dateFormat.parse(dob).getTime());

        Customer customer = new Customer(0, firstName, lastName, email, mobileNo, dateOfBirth, address);
        customerDAO.insertCustomer(customer);

        Account account = new Account(0, customer.getCustomerId(), initialDeposit, "active", accountType);
        accountDAO.insertAccount(account);

        response.sendRedirect(request.getContextPath() + "/admin/listCustomers");
    }

    private void updateAccountStatus(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        String status = request.getParameter("status");
        accountDAO.updateAccountStatus(accountNumber, status);
        response.sendRedirect(request.getContextPath() + "/admin/viewAccount?accountNumber=" + accountNumber);
    }
}
updatedCustomerServlet
package com.bms.controller;

import com.bms.dao.AccountDAO;
import com.bms.dao.CustomerDAO;
import com.bms.dao.TransactionDAO;
import com.bms.model.Account;
import com.bms.model.Customer;
import com.bms.model.Transaction;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

@WebServlet("/customer/*")
public class CustomerServlet extends HttpServlet {
    private CustomerDAO customerDAO;
    private AccountDAO accountDAO;
    private TransactionDAO transactionDAO;

    @Override
    public void init() {
        customerDAO = new CustomerDAO();
        accountDAO = new AccountDAO();
        transactionDAO = new TransactionDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/dashboard":
                    showDashboard(request, response);
                    break;
                case "/checkBalance":
                    checkBalance(request, response);
                    break;
                case "/transactionHistory":
                    showTransactionHistory(request, response);
                    break;
                case "/fundTransferForm":
                    showFundTransferForm(request, response);
                    break;
                case "/depositForm":
                    showDepositForm(request, response);
                    break;
                case "/withdrawalForm":
                    showWithdrawalForm(request, response);
                    break;
                case "/changeRequestForm":
                    showChangeRequestForm(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();
        try {
            switch (action) {
                case "/transferFunds":
                    transferFunds(request, response);
                    break;
                case "/deposit":
                    deposit(request, response);
                    break;
                case "/withdraw":
                    withdraw(request, response);
                    break;
                case "/changeRequest":
                    submitChangeRequest(request, response);
                    break;
                default:
                    response.sendRedirect(request.getContextPath() + "/customer/dashboard.jsp");
                    break;
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }
    }

    private void showDashboard(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        List<Account> accounts = accountDAO.getAccountsByCustomerId(customer.getCustomerId());
        request.setAttribute("accounts", accounts);
        request.getRequestDispatcher("/customer/dashboard.jsp").forward(request, response);
    }

    private void checkBalance(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        Account account = accountDAO.getAccountByNumber(accountNumber);
        List<Transaction> recentTransactions = transactionDAO.getRecentTransactions(accountNumber, 5);
        request.setAttribute("account", account);
        request.setAttribute("recentTransactions", recentTransactions);
        request.getRequestDispatcher("/customer/checkBalance.jsp").forward(request, response);
    }

    private void showTransactionHistory(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        List<Transaction> transactions = transactionDAO.getTransactionsByAccountNumber(accountNumber);
        request.setAttribute("transactions", transactions);
        request.getRequestDispatcher("/customer/transactionHistory.jsp").forward(request, response);
    }

    private void showFundTransferForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        List<Account> accounts = accountDAO.getAccountsByCustomerId(customer.getCustomerId());
        request.setAttribute("accounts", accounts);
        request.getRequestDispatcher("/customer/fundTransfer.jsp").forward(request, response);
    }

    private void showDepositForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        List<Account> accounts = accountDAO.getAccountsByCustomerId(customer.getCustomerId());
        request.setAttribute("accounts", accounts);
        request.getRequestDispatcher("/customer/deposit.jsp").forward(request, response);
    }

    private void showWithdrawalForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        List<Account> accounts = accountDAO.getAccountsByCustomerId(customer.getCustomerId());
        request.setAttribute("accounts", accounts);
        request.getRequestDispatcher("/customer/withdrawal.jsp").forward(request, response);
    }

    private void showChangeRequestForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/customer/changeRequest.jsp").forward(request, response);
    }

    private void transferFunds(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int fromAccountNumber = Integer.parseInt(request.getParameter("fromAccount"));
        int toAccountNumber = Integer.parseInt(request.getParameter("toAccount"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account fromAccount = accountDAO.getAccountByNumber(fromAccountNumber);
        Account toAccount = accountDAO.getAccountByNumber(toAccountNumber);

        if (fromAccount.getBalance().compareTo(amount) >= 0) {
            fromAccount.setBalance(fromAccount.getBalance().subtract(amount));
            toAccount.setBalance(toAccount.getBalance().add(amount));

            accountDAO.updateBalance(fromAccountNumber, fromAccount.getBalance());
            accountDAO.updateBalance(toAccountNumber, toAccount.getBalance());

            Transaction debitTransaction = new Transaction(0, fromAccountNumber, toAccountNumber, toAccount.getCustomerId().toString(), "", "TRANSFER", amount, new Timestamp(System.currentTimeMillis()), remarks);
            Transaction creditTransaction = new Transaction(0, toAccountNumber, fromAccountNumber, fromAccount.getCustomerId().toString(), "", "TRANSFER", amount, new Timestamp(System.currentTimeMillis()), remarks);

            transactionDAO.insertTransaction(debitTransaction);
            transactionDAO.insertTransaction(creditTransaction);

            request.setAttribute("message", "Transfer successful");
        } else {
            request.setAttribute("error", "Insufficient funds");
        }

        response.sendRedirect(request.getContextPath() + "/customer/dashboard");
    }

    private void deposit(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account account = accountDAO.getAccountByNumber(accountNumber);
        account.setBalance(account.getBalance().add(amount));
        accountDAO.updateBalance(accountNumber, account.getBalance());

        Transaction transaction = new Transaction(0, accountNumber, accountNumber, "", "", "DEPOSIT", amount, new Timestamp(System.currentTimeMillis()), remarks);
        transactionDAO.insertTransaction(transaction);

        request.setAttribute("message", "Deposit successful");
        response.sendRedirect(request.getContextPath() + "/customer/dashboard");
    }

    private void withdraw(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int accountNumber = Integer.parseInt(request.getParameter("accountNumber"));
        BigDecimal amount = new BigDecimal(request.getParameter("amount"));
        String remarks = request.getParameter("remarks");

        Account account = accountDAO.getAccountByNumber(accountNumber);
        if (account.getBalance().compareTo(amount) >= 0) {
            account.setBalance(account.getBalance().subtract(amount));
            accountDAO.updateBalance(accountNumber, account.getBalance());

            Transaction transaction = new Transaction(0, accountNumber, accountNumber, "", "", "WITHDRAWAL", amount, new Timestamp(System.currentTimeMillis()), remarks);
            transactionDAO.insertTransaction(transaction);

            request.setAttribute("message", "Withdrawal successful");
        } else {
            request.setAttribute("error", "Insufficient funds");
        }

        response.sendRedirect(request.getContextPath() + "/customer/dashboard");
    }

    private void submitChangeRequest(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        HttpSession session = request.getSession();
        Customer customer = (Customer) session.getAttribute("customer");
        String changeType = request.getParameter("changeType");
        String newValue = request.getParameter("newValue");
        String reason = request.getParameter("reason");

        // In a real-world scenario, you would create a separate table for change requests
        // For simplicity, we'll just update the customer information directly
        switch (changeType) {
            case "address":
                customer.setAddress(newValue);
                break;
            case "mobile":
                customer.setMobileNumber(newValue);
                break;
            case "email":
                customer.setEmail(newValue);
                break;
        }

        customerDAO.updateCustomer(customer);
        request.setAttribute("message", "Change request submitte




Updated CustomerDAO.java
package com.bms.dao;

import com.bms.model.Customer;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CustomerDAO {
    // Existing methods...

    public boolean updateCustomer(Customer customer) throws SQLException {
        String sql = "UPDATE customer_master SET first_name = ?, last_name = ?, email = ?, mobile_number = ?, date_of_birth = ?, address = ? WHERE customer_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, customer.getFirstName());
            pstmt.setString(2, customer.getLastName());
            pstmt.setString(3, customer.getEmail());
            pstmt.setString(4, customer.getMobileNumber());
            pstmt.setTimestamp(5, customer.getDateOfBirth());
            pstmt.setString(6, customer.getAddress());
            pstmt.setInt(7, customer.getCustomerId());
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    // You can add more methods here if needed for change requests or other operations
}

Updated AccountDAO.java
package com.bms.dao;

import com.bms.model.Account;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class AccountDAO {
    // Existing methods...

    public boolean updateBalance(int accountNumber, BigDecimal newBalance) throws SQLException {
        String sql = "UPDATE account_master SET balance = ? WHERE account_number = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setBigDecimal(1, newBalance);
            pstmt.setInt(2, accountNumber);
            
            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        }
    }

    public List<Account> getAccountsByCustomerId(int customerId) throws SQLException {
        List<Account> accounts = new ArrayList<>();
        String sql = "SELECT * FROM account_master WHERE customer_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, customerId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    accounts.add(new Account(
                        rs.getInt("account_number"),
                        rs.getInt("customer_id"),
                        rs.getBigDecimal("balance"),
                        rs.getString("status"),
                        rs.getString("account_type")
                    ));
                }
            }
        }
        return accounts;
    }
}
Updated TransactionDAO.java
package com.bms.dao;

import com.bms.model.Transaction;
import com.bms.util.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TransactionDAO {
    // Existing methods...

    public List<Transaction> getRecentTransactions(int accountNumber, int limit) throws SQLException {
        List<Transaction> transactions = new ArrayList<>();
        String sql = "SELECT * FROM transaction_master WHERE account_number = ? ORDER BY transaction_date DESC LIMIT ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, accountNumber);
            pstmt.setInt(2, limit);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    transactions.add(new Transaction(
                        rs.getInt("transaction_id"),
                        rs.getInt("account_number"),
                        rs.getInt("recipient_account_number"),
                        rs.getString("recipient_name"),
                        rs.getString("ifsc_code"),
                        rs.getString("type"),
                        rs.getBigDecimal("amount"),
                        rs.getTimestamp("transaction_date"),
                        rs.getString("remarks")
                    ));
                }
            }
        }
        return transactions;
    }
}

styles.css
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

.container {
    width: 80%;
    margin: auto;
    overflow: hidden;
    padding: 20px;
}

h1, h2, h3 {
    color: #333;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 12px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
    font-weight: bold;
}

form {
    background: #fff;
    padding: 20px;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
}

input[type="text"], input[type="number"], input[type="email"], input[type="password"], select, textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

button {
    display: inline-block;
    background: #333;
    color: #fff;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
}

button:hover {
    background: #555;
}

a {
    color: #333;
    text-decoration: none;
}

a:hover {
    color: #555;
}

.error {
    color: red;
    margin-bottom: 10px;
}

.success {
    color: green;
    margin-bottom: 10px;
}
web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <display-name>Banking Management System</display-name>

    <servlet>
        <servlet-name>AdminServlet</servlet-name>
        <servlet-class>com.bms.controller.AdminServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>CustomerServlet</servlet-name>
        <servlet-class>com.bms.controller.CustomerServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>AdminServlet</servlet-name>
        <url-pattern>/admin/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>CustomerServlet</servlet-name>
        <url-pattern>/customer/*</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
db.url=jdbc:mysql://localhost:3306/banking_management_system
db.username=your_username
db.password=your_password
db.driver=com.mysql.cj.jdbc.Driver



